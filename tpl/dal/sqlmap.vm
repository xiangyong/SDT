<?xml version="1.0" encoding="GBK"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap>
	<resultMap id="RM.{table.className}" class="{packageRoot}.dataobject.{table.className}DO">
# for(i in table.columns) {
#   var column = table.columns[i];
		<result property="{column.javaName}" column="{column.dbName}" javaType="{column.javaType}" jdbcType="{column.dbType}"  />
# }
    </resultMap>
    
    <sql id="{table.className}.columns">
# var columns = "";
# for(i in table.columns) {
#   var column = table.columns[i];
#   if(i>0) { columns+=","; }
#   columns+=column.dbName;
# }
	{columns}
	</sql>
	
	<insert id="{systemName}.{table.className}.insert">	
		INSERT INTO {table.tableName} (
			<include refid="{table.className}.columns"/>
	    ) VALUES (
# var columnValues = "";
# for(i in table.columns) {
#   var column = table.columns[i];
#   if(i>0) {columnValues+=",";}
#   columnValues+="#"+column.javaName+"#";
# }
			{columnValues}
	    )
# for(i in table.columns) {
#   var column = table.columns[i];
# if(column.ai) {
		<selectKey resultClass="long" type="post" keyProperty="{column.javaName}" >
            select last_insert_id()
    	</selectKey>
# }}
	</insert>
	
	<delete id="{systemName}.{table.className}.delete">
		DELETE FROM {table.tableName} 
# var isStart = false;
# for(i in table.columns) {
#   var column = table.columns[i];
#   if(column.pk) {
#     if(!isStart) {
#        isStart=true;
		 WHERE {column.dbName} = #{column.javaName}#
#     } else {
		   AND {column.dbName} = #{column.javaName}#
#     }
#   }	 	   
# }
    </delete>
	
	<update id="{systemName}.{table.className}.update">
# var setColumns = "";
# for(i in table.columns) {
#   var column = table.columns[i];
#   if(i>0) { setColumns+=","; }
#   setColumns+=column.dbName+" = #"+column.javaName+"#";
# }
#
		UPDATE {table.tableName} SET {setColumns}
# var isStart = false;
# for(i in table.columns) {
#   var column = table.columns[i];
#   if(column.pk) {
#     if(!isStart) {
#        isStart=true;
		 WHERE {column.dbName} = #{column.javaName}#
#     } else {
		   AND {column.dbName} = #{column.javaName}#
#     }
#   }	 	   
# }
	</update>
# hasStatus = false;
# for(i in table.columns) {
#	column = table.columns[i]; 
#	if(column.javaName=="status") {
#		hasStatus=true;
#		break;
#	}
# }
# if(hasStatus) {
	
	<update id="{systemName}.{table.className}.updateStatus">
		UPDATE {table.tableName} SET status = #status# \
# var isStart = false;
#	for(i in table.columns) {
#	  column = table.columns[i]; 
#	  if(column.pk) {
#     	if(!isStart) {
#         isStart=true;
WHERE {column.dbName} = #{column.javaName}#
# 		} else {
 AND {column.dbName} = #{column.javaName}#
#       }
#     }
#   }		
	</update>
# }
	
	<select id="{systemName}.{table.className}.queryCount" resultClass="long" >
    	SELECT /*{systemName}.{table.className}.queryCount*/
    		   count(1)
		  FROM {table.tableName}
	     WHERE 1=1
		<!--
		<isNotNull prepend="AND" property="id"> 
			<![CDATA[
			   ID = #id#
			]]>
		</isNotNull>
		-->
	</select>
	
	<select id="{systemName}.{table.className}.query" resultMap="RM.{table.className}" >
    	SELECT /*{systemName}.{table.className}.query*/
    		   <include refid="{table.className}.columns"/>
		  FROM {table.tableName}
	     WHERE 1=1
		<!--
		<isNotNull prepend="AND" property="id"> 
			<![CDATA[
			   ID = #id#
			]]>
		</isNotNull>
		-->
		limit #start#, #limit#
	</select>
</sqlMap>    